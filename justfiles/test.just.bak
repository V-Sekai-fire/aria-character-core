# Testing recipes for Aria Character Core
# Copyright (c) 2025-present K. S. Ernest (iFire) Lee
# SPDX-License-Identifier: MIT

import "install.just"
import "orchestration.just"

test-elixir-compile: install-elixir-erlang-env
    #!/usr/bin/env bash
    echo "🔨 Testing Elixir compilation for all apps..."
    
    # Setup asdf environment
    export ASDF_DIR="$(pwd)/.asdf"
    export ASDF_DATA_DIR="$(pwd)/.asdf"
    export PATH="$(pwd)/.asdf/bin:$(pwd)/.asdf/shims:${PATH}"
    . ./.asdf/asdf.sh || true
    
    echo "📦 Getting dependencies..."
    mix deps.get || (echo "❌ Failed to get dependencies" && exit 1)
    
    echo "🧹 Cleaning previous compilation..."
    env ERL_COMPILER_OPTIONS="no_type_opt" mix clean
    
    echo "🔨 Compiling all apps..."
    echo "Environment variable set to: $ERL_COMPILER_OPTIONS"
    env ERL_COMPILER_OPTIONS="no_type_opt" mix compile --ignore-module-conflict || (echo "❌ Compilation failed" && exit 1)
    
    echo "✅ All apps compiled successfully!"

test-elixir-unit: start-cockroach test-elixir-compile
    #!/usr/bin/env bash
    echo "🧪 Running unit tests for all Elixir apps..."
    
    # Setup asdf environment
    export ASDF_DIR="$(pwd)/.asdf"
    export ASDF_DATA_DIR="$(pwd)/.asdf"
    export PATH="$(pwd)/.asdf/bin:$(pwd)/.asdf/shims:${PATH}"
    . ./.asdf/asdf.sh || true
    
    # Set environment variables for testing
    export MIX_ENV=test
    export DATABASE_URL="postgresql://root@localhost:26257/aria_character_core_test?sslmode=disable"
    
    echo "🧪 Running ExUnit tests..."
    if mix test --exclude integration --exclude external; then
        echo "✅ All unit tests passed!"
    else
        echo "❌ Unit tests failed"
        exit 1
    fi

test-unit-ci: start-cockroach start-openbao start-seaweedfs start-elixir-app
    #!/usr/bin/env bash
    echo "🧪 Running CI unit tests (no external dependencies)..."
    
    # Setup asdf environment
    export ASDF_DIR="$(pwd)/.asdf"
    export ASDF_DATA_DIR="$(pwd)/.asdf"
    export PATH="$(pwd)/.asdf/bin:$(pwd)/.asdf/shims:${PATH}"
    . ./.asdf/asdf.sh || true
    
    # Set environment variables for testing
    export MIX_ENV=test
    export CI_UNIT_TESTS=true
    
    echo "🧪 Running ExUnit tests (excluding external dependencies)..."
    if mix test --exclude integration --exclude external; then
        echo "✅ All CI unit tests passed!"
    else
        echo "❌ CI unit tests failed"
        exit 1
    fi

test-openbao-connection: start-cockroach start-openbao
    #!/usr/bin/env bash
    echo "🔐 Testing basic OpenBao connection..."
    export VAULT_ADDR="http://localhost:8200"
    
    echo "⏳ Waiting for OpenBao to be ready..."
    timeout 30s bash -c 'until curl -sf http://localhost:8200/v1/sys/health >/dev/null 2>&1; do echo "Waiting..."; sleep 2; done' || (echo "❌ OpenBao not ready" && exit 1)
    
    echo "🔍 Checking OpenBao health..."
    curl -sf "$VAULT_ADDR/v1/sys/health" > /dev/null || (echo "❌ OpenBao health check failed" && exit 1)
    
    echo "✅ OpenBao connection test passed!"

test-basic-secrets: test-openbao-connection
    #!/usr/bin/env bash
    echo "🔑 Testing basic secret operations..."
    export VAULT_ADDR="http://localhost:8200"
    
    # Get token from native storage or initialize if needed
    get_vault_token() {
        # Try native storage first
        if [ -f /opt/bao/data/root_token.txt ]; then
            TOKEN=$(cat /opt/bao/data/root_token.txt 2>/dev/null || echo "")
            if [ -n "$TOKEN" ]; then
                echo "$TOKEN"
                return 0
            fi
        fi
        
        # Check if initialized
        INIT_STATUS=$(curl -sf "$VAULT_ADDR/v1/sys/init" 2>/dev/null || echo "")
        if echo "$INIT_STATUS" | grep -q '"initialized":false'; then
            echo "🔧 Initializing OpenBao..."
            INIT_RESPONSE=$(curl -sf -X POST -d '{"secret_shares":1,"secret_threshold":1}' "$VAULT_ADDR/v1/sys/init" 2>/dev/null)
            NEW_TOKEN=$(echo "$INIT_RESPONSE" | grep -o '"root_token":"[^"]*"' | cut -d'"' -f4)
            if [ -n "$NEW_TOKEN" ]; then
                sudo mkdir -p /opt/bao/data
                echo "$NEW_TOKEN" | sudo tee /opt/bao/data/root_token.txt >/dev/null
                sudo chown bao:bao /opt/bao/data/root_token.txt
                echo "$NEW_TOKEN"
                return 0
            fi
        fi
        
        echo "root"  # fallback
    }
    
    VAULT_TOKEN=$(get_vault_token)
    export VAULT_TOKEN
    echo "🔑 Using token: $VAULT_TOKEN"
    
    # Test basic secret write/read
    echo "📝 Testing secret write..."
    curl -sf -H "X-Vault-Token: $VAULT_TOKEN" \
         -H "Content-Type: application/json" \
         -X POST \
         -d '{"data":{"test":"value123"}}' \
         "$VAULT_ADDR/v1/secret/data/test-basic" > /dev/null || (echo "❌ Secret write failed" && exit 1)
    
    echo "📖 Testing secret read..."
    RESPONSE=$(curl -sf -H "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/secret/data/test-basic")
    
    if echo "$RESPONSE" | grep -q "value123"; then
        echo "✅ Basic secret operations test passed!"
    else
        echo "❌ Secret read failed or content mismatch"
        exit 1
    fi

test-aria-security: test-elixir-compile
    #!/usr/bin/env bash
    echo "🛡️  Testing aria_security app specifically..."
    
    # Setup asdf environment
    export ASDF_DIR="$(pwd)/.asdf"
    export ASDF_DATA_DIR="$(pwd)/.asdf"
    export PATH="$(pwd)/.asdf/bin:$(pwd)/.asdf/shims:${PATH}"
    . ./.asdf/asdf.sh || true
    
    if [ ! -d apps/aria_security ]; then
        echo "❌ aria_security app not found"
        exit 1
    fi
    
    cd apps/aria_security
    echo "📦 Getting dependencies for aria_security..."
    mix deps.get || (echo "❌ Failed to get deps" && exit 1)
    
    echo "🔨 Compiling aria_security..."
    env ERL_COMPILER_OPTIONS="no_type_opt" mix compile --ignore-module-conflict || (echo "❌ Compilation failed" && exit 1)
    
    echo "🧪 Running aria_security tests..."
    mix test --exclude integration --exclude external || (echo "❌ Tests failed" && exit 1)
    
    cd ../..
    echo "✅ aria_security tests passed!"

test-aria-auth: test-elixir-compile
    #!/usr/bin/env bash
    echo "🔐 Testing aria_auth app specifically..."
    
    # Setup asdf environment
    export ASDF_DIR="$(pwd)/.asdf"
    export ASDF_DATA_DIR="$(pwd)/.asdf"
    export PATH="$(pwd)/.asdf/bin:$(pwd)/.asdf/shims:${PATH}"
    . ./.asdf/asdf.sh || true
    
    if [ ! -d apps/aria_auth ]; then
        echo "❌ aria_auth app not found"
        exit 1
    fi
    
    cd apps/aria_auth
    echo "📦 Getting dependencies for aria_auth..."
    mix deps.get || (echo "❌ Failed to get deps" && exit 1)
    
    echo "🔨 Compiling aria_auth..."
    env ERL_COMPILER_OPTIONS="no_type_opt" mix compile --ignore-module-conflict || (echo "❌ Compilation failed" && exit 1)
    
    echo "🧪 Running aria_auth tests..."
    mix test --exclude integration --exclude external || (echo "❌ Tests failed" && exit 1)
    
    cd ../..
    echo "✅ aria_auth tests passed!"

test-softhsm-elixir: init-softhsm-elixir
    #!/usr/bin/env bash
    echo "🔧 Testing SoftHSM integration via AriaSecurity.SoftHSM module..."
    
    # Setup asdf environment
    export ASDF_DIR="$(pwd)/.asdf"
    export ASDF_DATA_DIR="$(pwd)/.asdf"
    export PATH="$(pwd)/.asdf/bin:$(pwd)/.asdf/shims:${PATH}"
    . ./.asdf/asdf.sh || true
    
    # Set SoftHSM environment
    export SOFTHSM2_CONF=/etc/softhsm2.conf
    export MIX_ENV=test
    
    echo "🔑 Testing SoftHSM operations via Elixir..."
    
    mix run -e '
    config = %{
      slot_id: 0,
      token_label: "openbao-token", 
      user_pin: "1234",
      so_pin: "1234"
    }
    
    # Test 1: List slots
    IO.puts("📋 Testing slot listing...")
    case AriaSecurity.SoftHSM.list_slots(config) do
      {:ok, slots} -> 
        IO.puts("✅ Successfully listed #{length(slots)} slots")
        IO.inspect(slots, label: "Available slots")
      {:error, reason} -> 
        IO.puts("❌ Failed to list slots: #{inspect(reason)}")
        System.halt(1)
    end
    
    # Test 2: Generate RSA keypair
    IO.puts("🔐 Testing RSA keypair generation...")
    case AriaSecurity.SoftHSM.generate_rsa_keypair(config, "test-key") do
      {:ok, result} -> 
        IO.puts("✅ Successfully generated RSA keypair")
        IO.inspect(result, label: "Keypair result")
      {:error, reason} -> 
        IO.puts("❌ Failed to generate keypair: #{inspect(reason)}")
        System.halt(1)
    end
    
    # Test 3: List objects
    IO.puts("📦 Testing object listing...")
    case AriaSecurity.SoftHSM.list_objects(config) do
      {:ok, objects} -> 
        IO.puts("✅ Successfully listed #{length(objects)} objects")
        IO.inspect(objects, label: "HSM objects")
      {:error, reason} -> 
        IO.puts("❌ Failed to list objects: #{inspect(reason)}")
        System.halt(1)
    end
    
    IO.puts("✅ All SoftHSM tests passed!")
    '
    
    echo "✅ SoftHSM Elixir integration tests completed successfully!"

test-all: test-elixir-compile test-elixir-unit test-openbao-connection test-basic-secrets
    #!/usr/bin/env bash
    echo "🧪 Running all tests (compile + unit + openbao + secrets)..."
    echo "✅ All tests completed!"

test-ci-fast: test-elixir-compile test-unit-ci test-aria-security test-aria-auth
