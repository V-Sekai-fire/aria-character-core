# Installation recipes for Aria Character Core
# Copyright (c) 2025-present K. S. Ernest (iFire) Lee
# SPDX-License-Identifier: MIT

# Cross-platform dependency installation for macOS and Linux
install-deps:
    #!/usr/bin/env bash
    if [ "{{os()}}" = "macos" ]; then
        echo "üì¶ Installing dependencies for macOS..."
        if ! command -v brew >/dev/null 2>&1; then
            echo "Homebrew not found. Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        brew update
        brew install \
            curl \
            wget \
            git \
            openssl \
            pkg-config \
            autoconf \
            automake \
            libtool \
            softhsm \
            opensc \
            jq \
            coreutils \
            unzip
        echo "‚úÖ macOS dependencies installed!"
    elif [ "{{os()}}" = "linux" ]; then
        echo "üì¶ Installing Ubuntu dependencies for native setup..."
        sudo apt update
        sudo apt install -y \
            curl \
            wget \
            git \
            build-essential \
            pkg-config \
            libssl-dev \
            libpcsc-lite-dev \
            autoconf \
            automake \
            libtool \
            softhsm2 \
            opensc \
            unzip \
            jq \
            systemd \
            daemon
        echo "‚úÖ Ubuntu dependencies installed!"
    else
        echo "‚ùå Unsupported OS: {{os()}}"
        exit 1
    fi

install-cockroach:
    #!/usr/bin/env bash
    if [ "{{os()}}" = "macos" ]; then
        echo "üóÑÔ∏è  Installing CockroachDB on macOS..."
        if command -v cockroach >/dev/null 2>&1; then
            echo "‚úÖ CockroachDB already installed"
            cockroach version
            exit 0
        fi
        
        # Detect architecture
        ARCH=$(uname -m)
        if [ "$ARCH" = "arm64" ]; then
            CRDB_ARCH="darwin-arm64"
        else
            CRDB_ARCH="darwin-amd64"
        fi
        
        echo "üì• Downloading CockroachDB from Oxide Computing for macOS ($ARCH)..."
        cd /tmp
        
        # Try Oxide Computing build first
        if wget -O cockroach.tgz "https://buildomat.eng.oxide.computer/public/file/oxidecomputer/cockroach/$CRDB_ARCH/865aff1595e494c2ce95030c7a2f20c4370b5ff8/cockroach.tgz" 2>/dev/null; then
            echo "‚úÖ Downloaded from Oxide Computing"
        else
            echo "‚ö†Ô∏è  Oxide Computing build not available for $ARCH, falling back to Homebrew..."
            if ! command -v brew >/dev/null 2>&1; then
                echo "‚ùå Homebrew not found and Oxide build unavailable"
                exit 1
            fi
            brew install cockroachdb/tap/cockroach
            echo "‚úÖ CockroachDB installed via Homebrew!"
            cockroach version
            exit 0
        fi
        
        tar -xzf cockroach.tgz
        sudo cp cockroach/cockroach /usr/local/bin/
        sudo chmod +x /usr/local/bin/cockroach
        rm -rf cockroach cockroach.tgz
        echo "‚úÖ CockroachDB installed!"
        cockroach version
    elif [ "{{os()}}" = "linux" ]; then
        echo "üóÑÔ∏è  Installing CockroachDB v21.1 from Oxide Computer on Linux..."
        if command -v cockroach >/dev/null 2>&1; then
            echo "‚úÖ CockroachDB already installed"
            cockroach version
            exit 0
        fi
        echo "üì• Downloading CockroachDB v21.1 from Oxide Computer..."
        cd /tmp
        wget -O cockroach.tgz "https://buildomat.eng.oxide.computer/public/file/oxidecomputer/cockroach/linux-amd64/865aff1595e494c2ce95030c7a2f20c4370b5ff8/cockroach.tgz"
        tar -xzf cockroach.tgz
        sudo cp cockroach/cockroach /usr/local/bin/
        sudo chmod +x /usr/local/bin/cockroach
        rm -rf cockroach cockroach.tgz
        echo "‚úÖ CockroachDB v21.1 (Oxide Computing) installed!"
        cockroach version
    else
        echo "‚ùå Unsupported OS: {{os()}}"
        exit 1
    fi

install-openbao:
    #!/usr/bin/env bash
    if [ "{{os()}}" = "linux" ]; then
        echo "üîê Installing OpenBao HSM natively..."
        
        if command -v bao >/dev/null 2>&1; then
            echo "‚úÖ OpenBao already installed"
            bao version
            exit 0
        fi
        
        # Check if the .deb file already exists
        if [ -f bao-hsm_2.2.2_linux_amd64.deb ]; then
            echo "üì¶ Using existing OpenBao .deb file..."
        else
            echo "üì• Downloading OpenBao HSM..."
            wget -O bao-hsm_2.2.2_linux_amd64.deb \
                "https://github.com/openbao/openbao/releases/download/v2.2.2/bao-hsm_2.2.2_linux_amd64.deb"
        fi
        
        # Install the .deb package
        sudo dpkg -i bao-hsm_2.2.2_linux_amd64.deb || sudo apt-get install -f -y
        
        # Create bao user and directories
        sudo useradd --system --home /opt/bao --shell /bin/false bao || true
        sudo mkdir -p /opt/bao/data /opt/bao/config /opt/bao/logs /var/lib/softhsm/tokens
        sudo chown -R bao:bao /opt/bao /var/lib/softhsm
        
        echo "‚úÖ OpenBao HSM installed!"
        bao version
    else
        echo "‚ö†Ô∏è  OpenBao installation only supported on Linux"
        echo "   On macOS, consider using Docker or alternative solutions"
        exit 1
    fi

install-seaweedfs:
    #!/usr/bin/env bash
    if [ "{{os()}}" = "linux" ]; then
        echo "üå± Installing SeaweedFS natively..."
        
        if command -v weed >/dev/null 2>&1; then
            echo "‚úÖ SeaweedFS already installed"
            weed version
            exit 0
        fi
        
        # Download SeaweedFS
        echo "üì• Downloading SeaweedFS..."
        cd /tmp
        
        # Get the latest version
        SEAWEEDFS_VERSION=$(curl -s https://api.github.com/repos/seaweedfs/seaweedfs/releases/latest | jq -r .tag_name)
        echo "üì¶ Downloading SeaweedFS $SEAWEEDFS_VERSION..."
        
        wget -O seaweedfs.tar.gz \
            "https://github.com/seaweedfs/seaweedfs/releases/download/${SEAWEEDFS_VERSION}/linux_amd64.tar.gz"
        
        # Extract and install
        tar -xzf seaweedfs.tar.gz
        sudo cp weed /usr/local/bin/
        sudo chmod +x /usr/local/bin/weed
        
        # Create seaweedfs user and directories
        sudo useradd --system --home /var/lib/seaweedfs --shell /bin/false seaweedfs || true
        sudo mkdir -p /var/lib/seaweedfs/{master,volume,filer,s3} /var/log/seaweedfs
        sudo chown -R seaweedfs:seaweedfs /var/lib/seaweedfs /var/log/seaweedfs
        
        # Clean up
        rm -f seaweedfs.tar.gz weed
        
        echo "‚úÖ SeaweedFS installed!"
        weed version
    else
        echo "‚ö†Ô∏è  SeaweedFS installation only supported on Linux"
        echo "   On macOS, consider using Docker or alternative solutions"
        exit 1
    fi

install-elixir-erlang-env:
    ./scripts/install-elixir-erlang.sh
