# OpenBao and SoftHSM service management for Aria Character Core
# Copyright (c) 2025-present K. S. Ernest (iFire) Lee
# SPDX-License-Identifier: MIT

import "install.just"

configure-softhsm:
    #!/usr/bin/env bash
    echo "🔧 Configuring SoftHSM for OpenBao..."
    
    if [ "{{os()}}" = "linux" ]; then
        # Create SoftHSM configuration
        sudo sh -c 'echo "# SoftHSM v2 configuration file" > /etc/softhsm2.conf'
        sudo sh -c 'echo "directories.tokendir = /var/lib/softhsm/tokens" >> /etc/softhsm2.conf'
        sudo sh -c 'echo "objectstore.backend = file" >> /etc/softhsm2.conf'
        sudo sh -c 'echo "log.level = INFO" >> /etc/softhsm2.conf'
        sudo sh -c 'echo "slots.removable = false" >> /etc/softhsm2.conf'
        
        # Set environment variable for SoftHSM config
        export SOFTHSM2_CONF=/etc/softhsm2.conf
        
        # Initialize SoftHSM slot if it doesn't exist
        if ! softhsm2-util --show-slots | grep -q "Slot 0"; then
            echo "🔑 Initializing SoftHSM slot 0..."
            softhsm2-util --init-token --slot 0 --label "openbao-token" --pin 1234 --so-pin 1234
        else
            echo "✅ SoftHSM slot 0 already initialized"
        fi
        
        echo "✅ SoftHSM configured successfully!"
    else
        echo "⚠️  SoftHSM configuration only supported on Linux"
        echo "   On macOS, SoftHSM may need different configuration paths"
    fi

init-softhsm-elixir: install-elixir-erlang-env configure-softhsm
    #!/usr/bin/env bash
    echo "🔧 Initializing SoftHSM using AriaSecurity.SoftHSM module..."
    
    # Setup asdf environment
    export ASDF_DIR="$(pwd)/.asdf"
    export ASDF_DATA_DIR="$(pwd)/.asdf"
    export PATH="$(pwd)/.asdf/bin:$(pwd)/.asdf/shims:${PATH}"
    . ./.asdf/asdf.sh || true
    
    # Set SoftHSM environment
    export SOFTHSM2_CONF=/etc/softhsm2.conf
    export MIX_ENV=dev
    
    # Use Elixir module to initialize SoftHSM
    echo "🔑 Using AriaSecurity.SoftHSM to initialize token..."
    
    mix run -e '\
    config = %{\
      slot_id: 0,\
      token_label: "openbao-token", \
      user_pin: "1234",\
      so_pin: "1234"\
    }\
    \
    case AriaSecurity.SoftHSM.initialize_token(config) do\
      {:ok, _} -> \
        IO.puts("✅ SoftHSM token initialized successfully via Elixir module")\
        \
        # List slots to verify\
        case AriaSecurity.SoftHSM.list_slots(config) do\
          {:ok, slots} -> \
            IO.puts("📋 Available slots:")\
            IO.inspect(slots)\
          {:error, reason} -> \
            IO.puts("⚠️  Could not list slots: #{inspect(reason)}")\
        end\
        \
      {:error, reason} -> \
        IO.puts("❌ Failed to initialize SoftHSM token: #{inspect(reason)}")\
        System.halt(1)\
    end\
    '
    
    echo "✅ SoftHSM initialized via Elixir module!"

start-openbao: install-openbao install-softhsm
    #!/usr/bin/env bash
    echo "🔐 Starting OpenBao..."
    
    # Check if OpenBao is already running
    if pgrep -f "bao server" > /dev/null; then
        echo "✅ OpenBao is already running"
        exit 0
    fi
    
    if [ "{{os()}}" = "macos" ]; then
        justfiles/start-openbao-macos.sh
    elif [ "{{os()}}" = "linux" ]; then
        echo "🐧 Starting OpenBao on Linux..."
        
        # Use systemctl for Linux
        sudo systemctl start aria-openbao.service
        sudo systemctl enable aria-openbao.service
        
        echo "✅ OpenBao service started!"
        
    else
        echo "❌ Unsupported operating system: {{os()}}"
        exit 1
    fi

stop-openbao:
    #!/usr/bin/env bash
    echo "🛑 Stopping OpenBao..."
    
    if [ "{{os()}}" = "macos" ]; then
        # Stop OpenBao process on macOS
        pkill -f "bao server" 2>/dev/null || true
        echo "✅ OpenBao stopped"
        
    elif [ "{{os()}}" = "linux" ]; then
        # Stop OpenBao service on Linux
        sudo systemctl stop aria-openbao.service 2>/dev/null || true
        echo "✅ OpenBao service stopped"
        
    else
        echo "❌ Unsupported operating system: {{os()}}"
        exit 1
    fi

init-openbao: start-openbao
    #!/usr/bin/env bash
    echo "🔐 Initializing OpenBao..."
    
    export VAULT_ADDR="http://localhost:8200"
    
    # Check if already initialized
    if curl -sf http://localhost:8200/v1/sys/init | jq -r .initialized 2>/dev/null | grep -q true; then
        echo "✅ OpenBao is already initialized"
        
        # Try to read existing root token
        if [ -f /opt/bao/data/root_token.txt ]; then
            echo "🔑 Root token found: /opt/bao/data/root_token.txt"
        else
            echo "⚠️  OpenBao is initialized but root token file not found"
            echo "   If you have the root token, save it to: /opt/bao/data/root_token.txt"
        fi
        
        exit 0
    fi
    
    echo "🚀 Initializing OpenBao for the first time..."
    
    # Initialize OpenBao
    bao operator init -key-shares=1 -key-threshold=1 -format=json > /tmp/bao_init.json
    
    if [ $? -eq 0 ]; then
        echo "✅ OpenBao initialized successfully!"
        
        # Extract and save root token and unseal key
        jq -r .root_token /tmp/bao_init.json > /opt/bao/data/root_token.txt
        jq -r .unseal_keys_hex[0] /tmp/bao_init.json > /opt/bao/data/unseal_key.txt
        
        # Set permissions
        chmod 600 /opt/bao/data/root_token.txt /opt/bao/data/unseal_key.txt
        
        echo "🔑 Root token saved to: /opt/bao/data/root_token.txt"
        echo "🗝️  Unseal key saved to: /opt/bao/data/unseal_key.txt"
        echo ""
        echo "⚠️  IMPORTANT: Store these securely! They cannot be recovered if lost."
        
        # Clean up temp file
        rm -f /tmp/bao_init.json
        
        # The server should unseal automatically with PKCS#11 seal
        echo "🔓 OpenBao should unseal automatically with SoftHSM seal"
        
    else
        echo "❌ Failed to initialize OpenBao"
        rm -f /tmp/bao_init.json
        exit 1
    fi

openbao-status:
    #!/usr/bin/env bash
    echo "📊 OpenBao Status:"
    echo "Process: $(pgrep -f 'bao server' >/dev/null && echo '✅ RUNNING' || echo '❌ STOPPED')"
    echo "Health: $(curl -sf http://localhost:8200/v1/sys/health >/dev/null 2>&1 && echo '✅ HEALTHY' || echo '❌ UNHEALTHY')"
    if curl -sf http://localhost:8200/v1/sys/health >/dev/null 2>&1; then
        echo "🌐 Web UI: http://localhost:8200"
        echo "🔑 Root token file: /opt/bao/data/root_token.txt"
    fi

openbao-logs:
    #!/usr/bin/env bash
    echo "📋 OpenBao Logs:"
    tail -30 /opt/bao/logs/openbao.log 2>/dev/null || echo "No OpenBao logs available"
